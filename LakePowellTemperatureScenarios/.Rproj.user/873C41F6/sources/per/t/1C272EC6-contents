# LakePowellTempScenarios.r
#
# Creates scenarios of Lake Powell Water Temperature-Depth.
#  - Use the scenarios to see the variation in water temperatures at a specified depth (such as the Turbine intake) for different water surface levels
#  - Also the reverse: scenarios of water levels for different temperatures at depth.
#
# Uses the following data:
# 1. qryProfiles at Primary Stations.csv - USGS sond data of water temperature profiles going back to 1960s (Vernieu 2015, https://pubs.usgs.gov/ds/471/pdf/ds471.pdf)
#
#         Vernieu, W. S. (2015). "Historical Physical and Chemical Data for Water in Lake Powell and from Glen Canyon Dam Releases, Utah-Arizona, 1964 â€“2013." Data Series 471, Version 3.0. https://pubs.usgs.gov/ds/471/pdf/ds471.pdf.
#
# 2. LAKEPOWELL06-16-2020T16.32.29.csv - USBR daily data of reservoir level/storage/release (https://www.usbr.gov/rsvrWater/HistoricalApp.html)
# 3. PowellLevels.xlsx - Definitions of reservoir zones and storage levels (from CRSS/Rosenberg)
#
# The basis data wrangling strategy is:
# 1. Load csv files
# 2. Join Primary Station and Lake Powell Daily data so we have the water level for each day a reading was taken
# 3. Substract depth from water level to get a level (elevation) for each reading.
#
# David E. Rosenberg
# June 19, 2020
# Utah State University
# david.rosenberg@usu.edu

rm(list = ls())  #Clear history

# Load required libraies

if (!require(tidyverse)) { 
  install.packages("tidyverse", repos="http://cran.r-project.org") 
  library(tidyverse) 
}

if (!require(readxl)) { 
  install.packages("readxl", repos="http://cran.r-project.org") 
  library(readxl) 
}

  
if (!require(RColorBrewer)) { 
  install.packages("RColorBrewer",repos="http://cran.r-project.org") 
  library(RColorBrewer) # 
}

if (!require(dplyr)) { 
  install.packages("dplyr",repos="http://cran.r-project.org") 
  library(dplyr) # 
}

if (!require(expss)) { 
  install.packages("expss",repos="http://cran.r-project.org") 
  library(expss) # 
}

if (!require(reshape)) { 
  install.packages("reshape", repos="http://cran.r-project.org") 
  library(reshape) 
}

if (!require(pracma)) { 
  install.packages("pracma", repos="http://cran.r-project.org") 
  library(pracma) 
}

if (!require(lubridate)) { 
  install.packages("lubridate", repos="http://cran.r-project.org") 
  library(lubridate) 
}

if (!require(directlabels)) { 
  install.packages("directlabels", repo="http://cran.r-project.org")
  library(directlabels) 
}


if (!require(plyr)) { 
  install.packages("plyr", repo="http://cran.r-project.org")
  library(plyr) 
}

if (!require(ggrepel)) { 
  devtools::install_github("slowkow/ggrepel")
  library(ggrepel) 
}

### 0. Definitions

dMetersToFeet = 3.28
sStation = 'LPCR0024' #Wahweap
sMonth = 'Jun' #Month

# New function interpNA to return NAs for values outside interpolation range (from https://stackoverflow.com/questions/47295879/using-interp1-in-r)
interpNA <- function(x, y, xi = x, ...) {
  yi <- rep(NA, length(xi));
  sel <- which(xi >= range(x)[1] & xi <= range(x)[2]);
  yi[sel] <- interp1(x = x, y = y, xi = xi[sel], ...);
  return(yi);
}


### 1. Read IN the data files

# Temperature profile data

sPowellTempProfileFile <- 'qryProfiles at Primary Stations.csv'

# Read in the historical Powell data
dfPowellTempProfiles <- read.csv(file=sPowellTempProfileFile, 
                               header=TRUE, 
                               
                               stringsAsFactors=FALSE,
                               sep=",")


# This historical reservoir level data comes from USBR website.

# File name to read in historical Powell Volume from CSV (download from USBR)
#    Water Operations: Historic Data, Upper Colorado River Division, U.S. Buruea of Reclamation
#    https://www.usbr.gov/rsvrWater/HistoricalApp.html

sPowellHistoricalFile <- 'LAKEPOWELL06-16-2020T16.32.29.csv'

# Read in the historical Powell data
dfPowellHistorical <- read.csv(file=sPowellHistoricalFile, 
                               header=TRUE, 
                               
                               stringsAsFactors=FALSE,
                               sep=",")


###This reservoir data comes from CRSS. It was exported to Excel.

# Read pool level data in from Excel
sExcelFile <- 'PowellZones.xlsx'
sStation <- 'LPCR0024'   #Closest to Dam

# Read in the historical Mead data
dfPowellZones <- read_excel(sExcelFile)

### 2. Join the Profile and Historical dataframes on the date

# Convert to date format
dfPowellHistorical$dDateTemp <- as.Date(dfPowellHistorical$Date, "%d-%b-%y")
dfPowellTempProfiles$dDate <- as.Date(dfPowellTempProfiles$Date, "%m/%d/%Y")

#Apparently R breaks the century at an odd place
#Coerce the years above 2050 (really 1950 to 1968) to be in prior century (substract 12*100 months)
dfPowellHistorical$Year <- as.numeric(format(dfPowellHistorical$dDateTemp,"%Y"))
dfPowellHistorical$dDate <- dfPowellHistorical$dDateTemp
dfPowellHistorical$dDate <- as.Date(ifelse((dfPowellHistorical$Year >= 2050),
                                           as.character(dfPowellHistorical$dDateTemp %m-% months(12*100)),as.character(dfPowellHistorical$dDateTemp)))
dfPowellHistorical$Year <- as.numeric(format(dfPowellHistorical$dDate,"%Y"))
dfPowellHistorical$Month <- (format(dfPowellHistorical$dDate,"%b"))

### 3. Left join the two dataframes so have an elevation/storage for each temperature profile value
dfPowellTempLevels <- left_join(dfPowellTempProfiles,dfPowellHistorical,by = c("dDate" = "dDate"))

### 4. Calculate an elevation for each measurement
dfPowellTempLevels$Elevation..feet. <- as.numeric(dfPowellTempLevels$Elevation..feet.)
dfPowellTempLevels$MeasLevel <- (dfPowellTempLevels$Elevation..feet.) - dMetersToFeet*dfPowellTempLevels$Depth
dfPowellTempLevels$MonNum <- as.numeric((format(dfPowellTempLevels$dDate,"%m")))

### 5. Filter on station and month

dfPowellTempLevelsPlot <- dfPowellTempLevels %>% filter(Station.ID == sStation)
# Tally Depths per day and Days per month
#dfPowellTempDays <- dcast(dfPowellTempLevelsPlot, Year ~ MonNum, value.var = "MonNum", na.rm = TRUE)

#dfPowellTempLevelsPerDay <- dfPowellTempLevelsPlot %>% group_by(Year,MonNum,dDate) %>% tally()
dfPowellTempLevelsPerDay <- dfPowellTempLevelsPlot %>% group_by(Year,MonNum,dDate) %>% dplyr::summarize(NumLevels = n(), MinTemp=min(T),MaxTemp=max(T))

dfPowellTempLevelsPerDay <- dfPowellTempLevelsPlot %>% group_by(Year,MonNum,dDate, Elevation..feet.) %>% dplyr::summarize(NumLevels = n(), MinTemp=min(T),MaxTemp=max(T), Level3525Temp = interp1(xi=3525, y=T, x=MeasLevel, method="linear" ))
dfPowellTempLevelsPerDay$Zone <- 3525


# Days per month
dfPowellTempDays <- dfPowellTempLevelsPerDay %>% group_by(Year,MonNum) %>% tally()

dfPowellTempDays <- dcast(dfPowellTempDays, Year ~ MonNum, value.var = "n", na.rm = FALSE)
dfPowellTempDays[is.na(dfPowellTempDays)] <- 0 
print("Number of measurements per month")
dfMonthSums <- colSums(dfPowellTempDays[,2:13],dim=1)

### Filter on station and month
dfPowellTempLevelsPlot <- dfPowellTempLevels %>% filter(Station.ID == sStation, Month == sMonth)

paste0("Station: ", sStation, ", Month: ", sMonth)
paste0("Number of observations = ", dfMonthSums[dfPowellTempLevelsPlot$MonNum[1]])

# Assign each starting lake elevation for a profile to a class to plot as the same color
cLakeElevationClasses <- c(3710,3655,3570,3525) 

dfPowellTempLevelsPlot$ElevationClass <- cLakeElevationClasses[1]
for (lev in cLakeElevationClasses) {
  dfPowellTempLevelsPlot$ElevationClass <- ifelse(dfPowellTempLevelsPlot$Elevation..feet. <= lev,lev,dfPowellTempLevelsPlot$ElevationClass)
  
}

dfPowellTempLevelsPlot$fElevationClass <- as.factor(dfPowellTempLevelsPlot$ElevationClass)

#Plot up the depth readings

#dfPlot <- dfPowellTempLevelsPlot %>% filter(dDate==as.Date("1995-06-06"))
dfPlot <- dfPowellTempLevelsPlot


## Determine the Min/Max watertemperature at each specified Elevation
detach(package:plyr)

dfTempAtDepth <- data.frame(MonNum=0,ElevationClass = 0, elevation=0,minTemp=0,maxTemp=0,rangeTemp=0)

#Loop over the elevations in the zone dataframe
for (elev in dfPowellZonesShort$level_feet) {
  
  #elev <- dfPowellZonesShort$level_feet[1]
  print(elev)
  
  #Interpolate for each date group
  dfCurrLevel <- dfPlot %>% group_by(MonNum, ElevationClass, dDate) %>% summarize(IntTemp = interpNA(xi=elev, x=MeasLevel, y=T,method="linear"))
  
  #Add to the dataframe
  dfCurrLevelGroup <- dfCurrLevel %>% group_by(ElevationClass, MonNum) %>% summarize(minTemp=min(IntTemp),maxTemp=max(IntTemp))
  #nminTemp <- min(na.omit(dfTempAtDepth$IntTemp))
  # <- max(na.omit(dfTempAtDepth$IntTemp))
  dfCurrLevelGroup$rangeTemp <- dfCurrLevelGroup$maxTemp - dfCurrLevelGroup$minTemp
  dfCurrLevelGroup$elevation <- elev
  #dfCurrLevelGroup$ElevationClass <- as.factor(dfCurrLevelGroup$ElevationClass)
  
  dfTempAtDepth <- rbind(dfTempAtDepth,as.data.frame(dfCurrLevelGroup))
}

#Remove first record
dfTempAtDepth <- dfTempAtDepth[2:nrow(dfTempAtDepth),]
#Remove records with NAs
dfTempAtDepth <- na.omit(dfTempAtDepth)



#Prepare the zone data to add as horizontal lines on the plot
#Grab the min/max temperatures
minTemp <- min(dfPlot$T)
maxTemp <- max(dfPlot$T)

#Subsett the columns
cZonesToShow <- c("Top of Dam", "Live Capacity", "Upper Eq. Tier (2019)", "Rated Power", "Upper Basin target", "Minimum Power (from Object)", "Can't release 7.5 maf/year", "Dead Pool (river outlets)")
dfPowellZones$level_feet <- dfPowellZones$`level (feet)`
dfPowellZones$Zone <- dfPowellZones$variable
dfPowellZonesShort <- as.data.frame(dfPowellZones %>% select(Zone, level_feet, stor_maf ) %>% filter (Zone %in% cZonesToShow) %>% arrange(-level_feet))

#Create the y-axis tick label from the level and variable
dfPowellZonesShort$rightlabel <- paste(round(dfPowellZonesShort$stor_maf,1),'-',dfPowellZonesShort$Zone)

dfPowellZonesShort$BeginTemp <- minTemp
dfPowellZonesShort$EndTemp <- maxTemp

dfPowellZonesShortMelt <- melt(dfPowellZonesShort[,c("Zone","level_feet", "BeginTemp","EndTemp")], id = c("Zone","level_feet"))

dfPowellZonesShortMelt <- dfPowellZonesShortMelt %>% arrange(-level_feet,Zone)

palBlues <- brewer.pal(9, "Blues")

# Plot water temperature vs elevation. Color as continuous
ggplot() +
  #Temperature profiles
  geom_line(data=dfPlot, aes(x = T,y = MeasLevel, color = Elevation..feet., group = dDate), size=1.5) +
  #Powell zones
  geom_line(data=dfPowellZonesShortMelt, aes(x = value, y = level_feet, group = Zone), size=1, color="purple", linetype = "longdash") +
  
  scale_x_continuous(trans= "reverse") + 
  scale_y_continuous(limits = c(3300,3715), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesShort$level_feet, labels = dfPowellZonesShort$rightlabel)) +
  
  #Continuous color scale by elevation
  scale_color_continuous(low=palBlues[3],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
  #Color breaked by zone
  #scale_color_manual(breaks = c(3710,3650,3670,3525),values=c(palBlues[9],palBlues[7],palBlues[5],palBlues[3])) +
  
 
  theme_bw() +
  #coord_fixed() +
  labs(x="Temperature (oC)", y="Elevation (feet)", color="Start Elevation\n(feet)") +
  theme(text = element_text(size=18), legend.text=element_text(size=16))
  
  
ggsave("PowellTempProfileCont.png", width=9, height = 6.5, units="in")



# Plot water temperature vs elevation. Color as class
ggplot() +
  #Temperature profiles
  geom_line(data=dfPlot, aes(x = T,y = MeasLevel, color = fElevationClass, group = dDate), size=1.5) +
  #Powell zones
  geom_line(data=dfPowellZonesShortMelt, aes(x = value, y = level_feet, group = Zone), size=1, color="purple", linetype = "longdash") +
  
  #Interpolated values
  #geom_point(data=dfPowellTempLevelsPerDay, aes(x=Level3525Temp,y=Zone)) + 
  
  scale_x_continuous(trans= "reverse") + 
  scale_y_continuous(limits = c(3300,3715), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesShort$level_feet, labels = dfPowellZonesShort$rightlabel)) +
  
  #Continuous color scale by elevation
  #scale_color_continuous(low=palBlues[3],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
  #Color breaked by zone
  scale_color_manual(breaks = cLakeElevationClasses,values=c(palBlues[9],palBlues[7],palBlues[5],palBlues[3])) +
  
  
  theme_bw() +
  #coord_fixed() +
  labs(x="Temperature (oC)", y="Elevation (feet)", color="Start Elevation\n(feet)") +
  theme(text = element_text(size=18), legend.text=element_text(size=14))

ggsave("PowellTempProfile.png", width=9, height = 6.5, units="in")






