#Split variable into species life stage and measurement
lTemp <- (as.data.frame(matrix(unlist(str_split(dfFishTempSuitMelt$variable, pattern="-")),ncol=2,byrow=TRUE)))
colnames(lTemp) <- c("LifeStage","Var")
lTemp$Row <- 1:nrow(lTemp)
dfFishTempSuitMelt$Row <- 1:nrow(dfFishTempSuitMelt)
# Join the split strings back in
dfFishTempSuitMelt <- inner_join(dfFishTempSuitMelt,lTemp,by = c("Row" = "Row"))
# Cast to separate out vars
dfFishTempSuitPlot <- dcast(dfFishTempSuitMelt, `Common Name` + GroupDescript + LifeStage + Keystone ~ Var)
dfFishTempSuitPlot$LifeStage <- as.character(dfFishTempSuitPlot$LifeStage)
#Reorder by the gouping in the plot => Temp group, Keystone, Common Name
dfFishTempSuitPlot <- dfFishTempSuitPlot[order(dfFishTempSuitPlot$GroupDescript,-dfFishTempSuitPlot$Keystone,dfFishTempSuitPlot$`Common Name`),]
dfFishTempSuitPlot$Xplot <- paste(dfFishTempSuitPlot$GroupDescript, 1 - dfFishTempSuitPlot$Keystone,dfFishTempSuitPlot$`Common Name`,sep="-")
cNames <- dfFishTempSuitPlot %>% filter(LifeStage == "Growth") %>% select(`Common Name`)
cgNames <- dfFishTempSuitPlot %>% filter(LifeStage == "Growth") %>% select(Xplot)
# plot the suitability data
ggplot(dfFishTempSuitPlot) +
#Min-max range
geom_errorbar(aes(x = Xplot, ymin = Min., ymax = Max., color=GroupDescript, size = Keystone)) +
#Optimal as point
#geom_point(aes(x=Xplot,y=Opt., color=GroupDescript),size=4) +
facet_wrap( ~ LifeStage) +
scale_color_manual(values = c("blue","red","pink")) +
# scale_x_discrete(labels = dfFishTempSuitPlot %>% filter(LifeStage == "Growth") %>% select(`Common Name`)) +
scale_size_continuous(range = c(1,2), breaks = c(0,1), labels = c("Study", "Keystone")) +
scale_x_discrete(breaks = cgNames$Xplot, labels = cNames$`Common Name`) +
labs(x="Fish Species (common name)", y="River Temperature (oC)") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
legend.key = element_blank(), axis.text.x = element_text(angle = 90, size=10, hjust=0.95,vjust=0.2))
ggsave("SpeciesTempNeeds.png", width=9, height = 6.5, units="in")
# Plot all life stages on top of eahc other
ggplot(dfFishTempSuitPlot) +
#Min-max range
geom_errorbar(aes(x = Xplot, ymin = Min., ymax = Max., color=GroupDescript, size = Keystone)) +
#Optimal as point
#geom_point(aes(x=Xplot,y=Opt., color=GroupDescript),size=4) +
#facet_wrap( ~ LifeStage) +
scale_color_manual(values = c("blue","red","pink")) +
# scale_x_discrete(labels = dfFishTempSuitPlot %>% filter(LifeStage == "Growth") %>% select(`Common Name`)) +
scale_size_continuous(range = c(1,2), breaks = c(0,1), labels = c("Study", "Keystone")) +
scale_x_discrete(breaks = cgNames$Xplot, labels = cNames$`Common Name`) +
labs(x="Fish Species (common name)", y="River Temperature (oC)") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
legend.key = element_blank(), axis.text.x = element_text(angle = 90, size=14, hjust=0.95,vjust=0.2))
ggsave("SpeciesTempNeedsCombined.png", width=9, height = 6.5, units="in")
###### 2. Plot Release temperature data vs time
## Calculate daily min, max, average, range
dfPowellReleaseTempSum <- dfPowellReleaseTemp %>% group_by(DateClean) %>% summarize(minDay = min(WaterTemp_C),
maxDay = max(WaterTemp_C),
avgDay = mean(WaterTemp_C),
rangeDay = max(WaterTemp_C) - min(WaterTemp_C))
#Pull out Year, Month, Month as abbr, Day for plotting
dfPowellReleaseTempSum$Year <- year(dfPowellReleaseTempSum$DateClean)
dfPowellReleaseTempSum$Month <- month(dfPowellReleaseTempSum$DateClean)
dfPowellReleaseTempSum$MonthTxt <- format(dfPowellReleaseTempSum$DateClean, "%b")
dfPowellReleaseTempSum$Day <- day(dfPowellReleaseTempSum$DateClean)
dfPowellReleaseTempSum$WaterYear <- ifelse(dfPowellReleaseTempSum$Month >= 10,dfPowellReleaseTempSum$Year, dfPowellReleaseTempSum$Year - 1 )
dfPowellReleaseTempSum$DayOfYear <- yday(dfPowellReleaseTempSum$DateClean)
dfDaysPerYear <- dfPowellReleaseTempSum %>% group_by(Year) %>% summarize(numDays = n())
dfDaysPerMonthYear <- dfPowellReleaseTempSum %>% group_by(Year,Month) %>% summarize(numDays = n())
palBlues <- brewer.pal(9, "Blues")
palReds <- brewer.pal(9, "Reds")
palBlueFunc <- colorRampPalette(c(palBlues[3],palBlues[9]))
### 3. Join the Profile and Historical dataframes on the date
# Convert to date format
dfPowellHistorical$dDateTemp <- as.Date(dfPowellHistorical$Date, "%d-%b-%y")
dfPowellTempProfiles$dDate <- as.Date(dfPowellTempProfiles$Date, "%m/%d/%Y")
#Apparently R breaks the century at an odd place
#Coerce the years above 2050 (really 1950 to 1968) to be in prior century (substract 12*100 months)
dfPowellHistorical$Year <- as.numeric(format(dfPowellHistorical$dDateTemp,"%Y"))
dfPowellHistorical$dDate <- dfPowellHistorical$dDateTemp
dfPowellHistorical$dDate <- as.Date(ifelse((dfPowellHistorical$Year >= 2050),
as.character(dfPowellHistorical$dDateTemp %m-% months(12*100)),as.character(dfPowellHistorical$dDateTemp)))
dfPowellHistorical$Year <- as.numeric(format(dfPowellHistorical$dDate,"%Y"))
dfPowellHistorical$Month <- (format(dfPowellHistorical$dDate,"%b"))
### 3. Left join the two dataframes so have an elevation/storage for each temperature profile value
dfPowellTempLevels <- left_join(dfPowellTempProfiles,dfPowellHistorical,by = c("dDate" = "dDate"))
### 4. Calculate an elevation for each measurement
dfPowellTempLevels$Elevation..feet. <- as.numeric(dfPowellTempLevels$Elevation..feet.)
dfPowellTempLevels$MeasLevel <- (dfPowellTempLevels$Elevation..feet.) - dMetersToFeet*dfPowellTempLevels$Depth
dfPowellTempLevels$MonNum <- as.numeric((format(dfPowellTempLevels$dDate,"%m")))
### 5. Filter on station and month
dfPowellTempLevelsPlot <- dfPowellTempLevels %>% filter(Station.ID == sStation)
# Tally Depths per day and Days per month
#dfPowellTempDays <- dcast(dfPowellTempLevelsPlot, Year ~ MonNum, value.var = "MonNum", na.rm = TRUE)
#dfPowellTempLevelsPerDay <- dfPowellTempLevelsPlot %>% group_by(Year,MonNum,dDate) %>% tally()
dfPowellTempLevelsPerDay <- dfPowellTempLevelsPlot %>% group_by(Year,MonNum,dDate) %>% dplyr::summarize(NumLevels = n(), MinTemp=min(T),MaxTemp=max(T))
dfPowellTempLevelsPerDay <- dfPowellTempLevelsPlot %>% group_by(Year,MonNum,dDate, Elevation..feet.) %>% dplyr::summarize(NumLevels = n(), MinTemp=min(T),MaxTemp=max(T), Level3525Temp = interp1(xi=3525, y=T, x=MeasLevel, method="linear" ))
dfPowellTempLevelsPerDay$Zone <- 3525
# Days per month
dfPowellTempDays <- dfPowellTempLevelsPerDay %>% group_by(Year,MonNum) %>% tally()
dfPowellTempDays <- dcast(dfPowellTempDays, Year ~ MonNum, value.var = "n", na.rm = FALSE)
dfPowellTempDays[is.na(dfPowellTempDays)] <- 0
print("Number of measurements per month")
dfMonthSums <- colSums(dfPowellTempDays[,2:13],dim=1)
dfPlot <- dfPowellTempLevelsPlot
minTemp <- min(dfPlot$T)
maxTemp <- max(dfPlot$T)
#Subsett the columns
cZonesToShow <- c("Top of Dam", "Live Capacity", "Upper Eq. Tier (2019)", "Rated Power", "Upper Basin target", "Minimum Power (from Object)", "Can't release 7.5 maf/year", "Dead Pool (river outlets)")
dfPowellZones$level_feet <- dfPowellZones$`level (feet)`
dfPowellZones$Zone <- dfPowellZones$variable
dfPowellZonesShort <- as.data.frame(dfPowellZones %>% select(Zone, level_feet, stor_maf ) %>% filter (Zone %in% cZonesToShow) %>% arrange(-level_feet))
#Create the y-axis tick label from the level and variable
dfPowellZonesShort$rightlabel <- paste(round(dfPowellZonesShort$stor_maf,1),'-',dfPowellZonesShort$Zone)
dfPowellZonesShort$BeginTemp <- minTemp
dfPowellZonesShort$EndTemp <- maxTemp
dfPowellZonesShortMelt <- melt(dfPowellZonesShort[,c("Zone","level_feet", "BeginTemp","EndTemp")], id = c("Zone","level_feet"))
dfPowellZonesShortMelt <- dfPowellZonesShortMelt %>% arrange(-level_feet,Zone)
library(ggrepel)
### Plot Release temperature vs. lake surface elevation for full daily data set (very messy)
dfPowellReleaseElev <- left_join(dfPowellReleaseTempSum,dfPowellHistorical,by = c("DateClean" = "dDate"))
#Convert to numric
dfPowellReleaseElev$WaterSurface <- as.numeric(dfPowellReleaseElev$Elevation..feet.)
#Calculate Water Year
dfPowellReleaseElev$WaterYear <- ifelse(dfPowellReleaseElev$Month.x >= 10, dfPowellReleaseElev$Year.x,dfPowellReleaseElev$Year.x - 1)
#Classify each year as lake level increasing, decreasing, or steady within a given margin
nMargin <- 5 #feet
nTempMargin <- 1.5 # oC
#Pull the first and last weater level measurements for each year
dfPowellLevelChange <- rbind(dfPowellReleaseElev %>% filter(Month.x == 1,Day==1),
dfPowellReleaseElev %>% filter(Month.x == 12,Day==31))
dfPowellTempChange <- dcast(dfPowellLevelChange,Year.y~Month.y , mean, value.var = "avgDay")
dfPowellLevelChange <- dcast(dfPowellLevelChange,Year.y~Month.y , mean, value.var = c("WaterSurface"))#,"avgDay"))
#Classify water level changes for each year
dfPowellLevelChange$LevelYearType <- ifelse(dfPowellLevelChange$Dec - dfPowellLevelChange$Jan > nMargin,"Rise",ifelse(dfPowellLevelChange$Dec - dfPowellLevelChange$Jan < -nMargin,"Fall","Steady"))
dfPowellTempChange$TempYearType <- ifelse(dfPowellTempChange$Dec - dfPowellTempChange$Jan > nTempMargin,"Rise",ifelse(dfPowellTempChange$Dec - dfPowellTempChange$Jan < -nTempMargin,"Fall","Steady"))
#Join the two
dfPowellLevelChange <- left_join(dfPowellLevelChange,dfPowellTempChange,by=c("Year.y" = "Year.y"))
#Join the classification back to main data frame
dfPowellReleaseElev <- left_join(dfPowellReleaseElev,dfPowellLevelChange[,c(1,4,7)], by=c("Year.y" = "Year.y"))
#Reorder the factor levels
dfPowellReleaseElev <- transform(dfPowellReleaseElev, LevelYearType = factor(LevelYearType,c("Fall","Steady","Rise")))
dfPowellReleaseElev <- transform(dfPowellReleaseElev, TempYearType = factor(TempYearType,c("Fall","Steady","Rise")))
dfTempElevationModelCalc$Month.x <- dfTempElevationModelCalc$Month
#Remove highest elevation (top of dam)
dfPowellZonesMinusTop <- dfPowellZonesShort %>% filter(level_feet <= 3700)
# For the temperature profiles, reposition elevation so 0 foot measurement depth is at the penstock intakes
# 10 foot measurement depth is 10 feet above penstock intakes, etc.
# So assume the water surface is always depth feet above the penstock
dfPowellTempLevelsPlot$ElevAvbPenstock <- dfPowellZonesMinusTop[5,2] + dMetersToFeet*dfPowellTempLevelsPlot$Depth
#Add a Month.x field to allow faceting
dfPowellTempLevelsPlot$Month.x <- dfPowellTempLevelsPlot$MonNum
#Water Surface Elevation vs Release Temperature by Month
#with Monthly regression model overlaid
#NEED to add legend for regression fits and points above surface
ggplot(data=dfPowellReleaseElev %>% filter(Day %in% seq(1,31, by=1)) %>% arrange(DateClean)) +
#geom_line(aes(x=Day,y=avgDay), color="black") +
#Error bar on release data - color by water surface
geom_errorbar(aes(y=WaterSurface, xmin= minDay, xmax=maxDay, color = Year.x), size=1) +
geom_line(data = dfTempElevationModelCalc, aes(x=Temperature, y=Elevation), color = "Black", size=1.25) +
scale_color_continuous(low=palBlues[2],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
labs(y="Water Surface Elevation (feet)", x="Turbine Release Temperature (oC)", color="Year") +
#labs(x="Temperature at Wahweap @ 3,490 ft (oC)", y="Release Temperature (oC)", color="") +
facet_wrap(~Month.x) +
scale_y_continuous(limits = c(3370,3700), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesMinusTop$level_feet, labels = dfPowellZonesMinusTop$rightlabel )) +
xlim(7,30) +
theme(text = element_text(size=18), legend.text=element_text(size=16),
legend.key = element_blank())
ggsave("CompareReleaseElevationMonth.png", width=9, height = 6.5, units="in")
#Water Surface Elevation vs Release Temperature by Month
# with Monthly regression model overlaid and release temperature inferred from depth profiles
# if water surface is at specified elevation and release is from penstocks
ggplot(data=dfPowellReleaseElev %>% filter(Day %in% seq(1,31, by=1)) %>% arrange(DateClean)) +
#geom_line(aes(x=Day,y=avgDay), color="black") +
#Points represent transformed temperature profile reading. For a specific depth below the water surface,
#we calculate the elevation that would put the depth at the turbine elevation
geom_point(data = dfPowellTempLevelsPlot %>% filter(Depth*dMetersToFeet <= 3600 - dfPowellZonesShort[6,2]), aes(y = ElevAvbPenstock, x = T, shape ="Wahweap temperature\nat turbine elev."), color = "Red", size=0.75) +
#Error bar on release data - color by water surface
geom_errorbar(aes(y=WaterSurface, xmin= minDay, xmax=maxDay, color = Year.x), size=1) +
geom_line(data = dfTempElevationModelCalc %>% filter(Elevation > dfPowellZonesShort[6,2] - 10), aes(x=Temperature, y=Elevation, linetype="Spreadsheet model"), color = "Black", size=1.25) +
scale_color_continuous(low=palBlues[2],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
scale_linetype_manual(values = c("solid")) +
scale_shape_manual(values = c("circle")) +
labs(y="Water Surface Elevation (feet)", x="Turbine Release Temperature (oC)", color="Year of obs.", linetype="", shape="") +
#labs(x="Temperature at Wahweap @ 3,490 ft (oC)", y="Turbine Release Temperature (oC)", color="") +
facet_wrap(~Month.x) +
scale_y_continuous(limits = c(3370,3700), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesMinusTop$level_feet, labels = dfPowellZonesMinusTop$rightlabel )) +
xlim(7,30) +
#Vertical line at temperature breaks
geom_vline(xintercept=c(15,18)) +
theme(text = element_text(size=18), legend.text=element_text(size=16)) #,
#legend.key = element_blank())
ggsave("CompareReleaseElevationMonth.png", width=9, height = 6.5, units="in")
# Water Surface Elevation vs Release Temperature by Month
# Plot all monthly regression models on one plot
p <- ggplot(data=dfTempElevationModelCalc %>% filter(Elevation > dfPowellZonesShort[6,2] - 10)) +
#geom_line(aes(x=Day,y=avgDay), color="black") +
#Points represent transformed temperature profile reading. For a specific depth below the water surface,
#we calculate the elevation that would put the depth at the turbine elevation
#geom_point(data = dfPowellTempLevelsPlot %>% filter(Depth*dMetersToFeet <= 3600 - dfPowellZonesShort[6,2]), aes(y = ElevAvbPenstock, x = T, shape ="Wahweap temperature\nat turbine elev."), color = "Red", size=0.75) +
#Error bar on release data - color by water surface
#geom_errorbar(aes(y=WaterSurface, xmin= minDay, xmax=maxDay, color = Year.x), size=1) +
geom_line(aes(x=Temperature, y=Elevation, color = Month.x, group = Month.x), size=1.25) +
scale_color_continuous(low=palBlues[4],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
#scale_linetype_manual(values = c("solid")) +
#scale_shape_manual(values = c("circle")) +
labs(y="Water Surface Elevation (feet)", x="Turbine Release Temperature (oC)", color="Month", linetype="") +
#labs(x="Temperature at Wahweap @ 3,490 ft (oC)", y="Turbine Release Temperature (oC)", color="") +
#facet_wrap(~Month.x) +
scale_y_continuous(limits = c(3370,3700), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesMinusTop$level_feet, labels = dfPowellZonesMinusTop$rightlabel )) +
xlim(7,30) +
theme(text = element_text(size=18), legend.text=element_text(size=16)) #,
#legend.key = element_blank())
direct.label(p,"angled.endpoints")
ggsave("ElevationReleaseTempModelMonth.png", width=9, height = 6.5, units="in")
ggplot(data=dfPowellReleaseElev %>% filter(Day %in% seq(1,31, by=1)) %>% arrange(DateClean)) +
#geom_line(aes(x=Day,y=avgDay), color="black") +
#Error bar on release data - color by water surface
geom_errorbar(aes(y=WaterSurface, xmin= minDay, xmax=maxDay, color = Year.x), size=1) +
geom_line(data = dfTempElevationModelCalc, aes(x=Temperature, y=Elevation, linetype="Spreadsheet model"), color = "Black", size=1.25) +
scale_color_continuous(low=palBlues[2],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
scale_linetype_manual(values = c("solid")) +
labs(y="Water Surface Elevation (feet)", x="Turbine Release Temperature (oC)", color="Observed\nby Year", linetype="") +
#labs(x="Temperature at Wahweap @ 3,490 ft (oC)", y="Release Temperature (oC)", color="") +
facet_wrap(~Month.x) +
scale_y_continuous(limits = c(3370,3700), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesMinusTop$level_feet, labels = dfPowellZonesMinusTop$rightlabel )) +
xlim(7,30) +
theme(text = element_text(size=18), legend.text=element_text(size=16),
legend.key = element_blank())
ggplot(data=dfPowellReleaseElev %>% filter(Day %in% seq(1,31, by=1)) %>% arrange(DateClean)) +
#geom_line(aes(x=Day,y=avgDay), color="black") +
#Error bar on release data - color by water surface
geom_errorbar(aes(y=WaterSurface, xmin= minDay, xmax=maxDay, color = Year.x), size=1) +
geom_line(data = dfTempElevationModelCalc, aes(x=Temperature, y=Elevation, linetype="Spreadsheet model"), color = "Black", size=1.25) +
scale_color_continuous(low=palBlues[2],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
scale_linetype_manual(values = c("solid")) +
labs(y="Water Surface Elevation (feet)", x="Turbine Release Temperature (oC)", color="Observed (Year)", linetype="") +
#labs(x="Temperature at Wahweap @ 3,490 ft (oC)", y="Release Temperature (oC)", color="") +
facet_wrap(~Month.x) +
scale_y_continuous(limits = c(3370,3700), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesMinusTop$level_feet, labels = dfPowellZonesMinusTop$rightlabel )) +
xlim(7,30) +
theme(text = element_text(size=18), legend.text=element_text(size=16),
legend.key = element_blank())
ggsave("CompareReleaseElevationMonth.png", width=9, height = 6.5, units="in")
#Water Surface Elevation vs Release Temperature by Month
# with Monthly regression model overlaid and release temperature inferred from depth profiles
# if water surface is at specified elevation and release is from penstocks
ggplot(data=dfPowellReleaseElev %>% filter(Day %in% seq(1,31, by=1)) %>% arrange(DateClean)) +
#geom_line(aes(x=Day,y=avgDay), color="black") +
#Points represent transformed temperature profile reading. For a specific depth below the water surface,
#we calculate the elevation that would put the depth at the turbine elevation
geom_point(data = dfPowellTempLevelsPlot %>% filter(Depth*dMetersToFeet <= 3600 - dfPowellZonesShort[6,2]), aes(y = ElevAvbPenstock, x = T, shape ="Wahweap temperature\nat turbine elev."), color = "Red", size=0.75) +
#Error bar on release data - color by water surface
geom_errorbar(aes(y=WaterSurface, xmin= minDay, xmax=maxDay, color = Year.x), size=1) +
geom_line(data = dfTempElevationModelCalc %>% filter(Elevation > dfPowellZonesShort[6,2] - 10), aes(x=Temperature, y=Elevation, linetype="Spreadsheet model"), color = "Black", size=1.25) +
scale_color_continuous(low=palBlues[2],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
scale_linetype_manual(values = c("solid")) +
scale_shape_manual(values = c("circle")) +
labs(y="Water Surface Elevation (feet)", x="Turbine Release Temperature (oC)", color="Year of obs.", linetype="", shape="") +
#labs(x="Temperature at Wahweap @ 3,490 ft (oC)", y="Turbine Release Temperature (oC)", color="") +
facet_wrap(~Month.x) +
scale_y_continuous(limits = c(3370,3700), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesMinusTop$level_feet, labels = dfPowellZonesMinusTop$rightlabel )) +
xlim(7,30) +
#Vertical line at temperature breaks
#geom_vline(xintercept=c(15,18)) +
theme(text = element_text(size=18), legend.text=element_text(size=16)) #,
#legend.key = element_blank())
ggsave("CompareReleaseElevationMonth.png", width=9, height = 6.5, units="in")
ggplot(data=dfPowellReleaseElev %>% filter(Day %in% seq(1,31, by=1)) %>% arrange(DateClean)) +
#geom_line(aes(x=Day,y=avgDay), color="black") +
#Points represent transformed temperature profile reading. For a specific depth below the water surface,
#we calculate the elevation that would put the depth at the turbine elevation
#geom_point(data = dfPowellTempLevelsPlot %>% filter(Depth*dMetersToFeet <= 3600 - dfPowellZonesShort[6,2]), aes(y = ElevAvbPenstock, x = T, shape ="Wahweap temperature\nat turbine elev."), color = "Red", size=0.75) +
geom_point(data = dfPowellTempLevelsPlot %>% filter(Depth*dMetersToFeet <= 3600 - dfPowellZonesShort[6,2]), aes(y = ElevAvbPenstock, x = T, shape ="Wahweap temperature\nwith surface elevation\ndepth ft. above\nturbine elev."), color = "Red", size=0.75) +
#Error bar on release data - color by water surface
geom_errorbar(aes(y=WaterSurface, xmin= minDay, xmax=maxDay, color = Year.x), size=1) +
geom_line(data = dfTempElevationModelCalc %>% filter(Elevation > dfPowellZonesShort[6,2] - 10), aes(x=Temperature, y=Elevation, linetype="Spreadsheet model"), color = "Black", size=1.25) +
scale_color_continuous(low=palBlues[2],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
scale_linetype_manual(values = c("solid")) +
scale_shape_manual(values = c("circle")) +
labs(y="Water Surface Elevation (feet)", x="Turbine Release Temperature (oC)", color="Year of obs.", linetype="", shape="") +
#labs(x="Temperature at Wahweap @ 3,490 ft (oC)", y="Turbine Release Temperature (oC)", color="") +
facet_wrap(~Month.x) +
scale_y_continuous(limits = c(3370,3700), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesMinusTop$level_feet, labels = dfPowellZonesMinusTop$rightlabel )) +
xlim(7,30) +
#Vertical line at temperature breaks
#geom_vline(xintercept=c(15,18)) +
theme(text = element_text(size=18), legend.text=element_text(size=16)) #,
#legend.key = element_blank())
ggplot(data=dfPowellReleaseElev %>% filter(Day %in% seq(1,31, by=1)) %>% arrange(DateClean)) +
#geom_line(aes(x=Day,y=avgDay), color="black") +
#Points represent transformed temperature profile reading. For a specific depth below the water surface,
#we calculate the elevation that would put the depth at the turbine elevation
#geom_point(data = dfPowellTempLevelsPlot %>% filter(Depth*dMetersToFeet <= 3600 - dfPowellZonesShort[6,2]), aes(y = ElevAvbPenstock, x = T, shape ="Wahweap temperature\nat turbine elev."), color = "Red", size=0.75) +
geom_point(data = dfPowellTempLevelsPlot %>% filter(Depth*dMetersToFeet <= 3600 - dfPowellZonesShort[6,2]), aes(y = ElevAvbPenstock, x = T, shape ="Wahweap temperature\nwith surface elevation\ndepth ft. above\nturbine elev."), color = "Red", size=0.75) +
#Error bar on release data - color by water surface
geom_errorbar(aes(y=WaterSurface, xmin= minDay, xmax=maxDay, color = Year.x), size=1) +
geom_line(data = dfTempElevationModelCalc %>% filter(Elevation > dfPowellZonesShort[6,2] - 10), aes(x=Temperature, y=Elevation, linetype="Spreadsheet model"), color = "Black", size=1.25) +
scale_color_continuous(low=palBlues[2],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
scale_linetype_manual(values = c("solid")) +
scale_shape_manual(values = c("circle")) +
labs(y="Water Surface Elevation (feet)", x="Turbine Release Temperature (oC)", color="Observed release (Year)", linetype="", shape="") +
#labs(x="Temperature at Wahweap @ 3,490 ft (oC)", y="Turbine Release Temperature (oC)", color="") +
facet_wrap(~Month.x) +
scale_y_continuous(limits = c(3370,3700), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesMinusTop$level_feet, labels = dfPowellZonesMinusTop$rightlabel )) +
xlim(7,30) +
#Vertical line at temperature breaks
#geom_vline(xintercept=c(15,18)) +
theme(text = element_text(size=18), legend.text=element_text(size=16)) #,
#legend.key = element_blank())
ggplot(data=dfPowellReleaseElev %>% filter(Day %in% seq(1,31, by=1)) %>% arrange(DateClean)) +
#geom_line(aes(x=Day,y=avgDay), color="black") +
#Points represent transformed temperature profile reading. For a specific depth below the water surface,
#we calculate the elevation that would put the depth at the turbine elevation
#geom_point(data = dfPowellTempLevelsPlot %>% filter(Depth*dMetersToFeet <= 3600 - dfPowellZonesShort[6,2]), aes(y = ElevAvbPenstock, x = T, shape ="Wahweap temperature\nat turbine elev."), color = "Red", size=0.75) +
geom_point(data = dfPowellTempLevelsPlot %>% filter(Depth*dMetersToFeet <= 3600 - dfPowellZonesShort[6,2]), aes(y = ElevAvbPenstock, x = T, shape ="Wahweap temperature profile\nshifted so water surface is\ndepth feet above turbine elev."), color = "Red", size=0.75) +
#Error bar on release data - color by water surface
geom_errorbar(aes(y=WaterSurface, xmin= minDay, xmax=maxDay, color = Year.x), size=1) +
geom_line(data = dfTempElevationModelCalc %>% filter(Elevation > dfPowellZonesShort[6,2] - 10), aes(x=Temperature, y=Elevation, linetype="Spreadsheet model"), color = "Black", size=1.25) +
scale_color_continuous(low=palBlues[2],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
scale_linetype_manual(values = c("solid")) +
scale_shape_manual(values = c("circle")) +
labs(y="Water Surface Elevation (feet)", x="Turbine Release Temperature (oC)", color="Observed release (Year)", linetype="", shape="") +
#labs(x="Temperature at Wahweap @ 3,490 ft (oC)", y="Turbine Release Temperature (oC)", color="") +
facet_wrap(~Month.x) +
scale_y_continuous(limits = c(3370,3700), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesMinusTop$level_feet, labels = dfPowellZonesMinusTop$rightlabel )) +
xlim(7,30) +
#Vertical line at temperature breaks
#geom_vline(xintercept=c(15,18)) +
theme(text = element_text(size=18), legend.text=element_text(size=16)) #,
#legend.key = element_blank())
ggplot(data=dfPowellReleaseElev %>% filter(Day %in% seq(1,31, by=1)) %>% arrange(DateClean)) +
#geom_line(aes(x=Day,y=avgDay), color="black") +
#Points represent transformed temperature profile reading. For a specific depth below the water surface,
#we calculate the elevation that would put the depth at the turbine elevation
#geom_point(data = dfPowellTempLevelsPlot %>% filter(Depth*dMetersToFeet <= 3600 - dfPowellZonesShort[6,2]), aes(y = ElevAvbPenstock, x = T, shape ="Wahweap temperature\nat turbine elev."), color = "Red", size=0.75) +
geom_point(data = dfPowellTempLevelsPlot %>% filter(Depth*dMetersToFeet <= 3600 - dfPowellZonesShort[6,2]), aes(y = ElevAvbPenstock, x = T, shape ="Wahweap temperature profile:\nshifted so water surface is\ndepth feet above turbine elev."), color = "Red", size=0.75) +
#Error bar on release data - color by water surface
geom_errorbar(aes(y=WaterSurface, xmin= minDay, xmax=maxDay, color = Year.x), size=1) +
geom_line(data = dfTempElevationModelCalc %>% filter(Elevation > dfPowellZonesShort[6,2] - 10), aes(x=Temperature, y=Elevation, linetype="Spreadsheet model"), color = "Black", size=1.25) +
scale_color_continuous(low=palBlues[2],high=palBlues[9], na.value="White", guide = "colorbar", aesthetics="color") +
scale_linetype_manual(values = c("solid")) +
scale_shape_manual(values = c("circle")) +
labs(y="Water Surface Elevation (feet)", x="Turbine Release Temperature (oC)", color="Observed release (Year)", linetype="", shape="") +
#labs(x="Temperature at Wahweap @ 3,490 ft (oC)", y="Turbine Release Temperature (oC)", color="") +
facet_wrap(~Month.x) +
scale_y_continuous(limits = c(3370,3700), breaks = seq(3250,3711, by=50),labels=seq(3250,3711, by=50),  sec.axis = sec_axis(~. +0, name = "Active Storage\n(million acre-feet)", breaks = dfPowellZonesMinusTop$level_feet, labels = dfPowellZonesMinusTop$rightlabel )) +
xlim(7,30) +
#Vertical line at temperature breaks
#geom_vline(xintercept=c(15,18)) +
theme(text = element_text(size=18), legend.text=element_text(size=16)) #,
#legend.key = element_blank())
ggsave("CompareReleaseElevationMonth.png", width=9, height = 6.5, units="in")
FindTempRangeForElevation <- function(dfObserved, dfProfile, Month, Elevation) {
#Find the range of release temperature for a specified Elevation using both observed and profile data sets
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, Month.x = Month) %>% aggregate(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, Month.x = Month) %>% aggregate(minTemp = min(T), maxTemp = max(T))
#Combine (bind) the datasets
dfRangeComb <- rbind(dfRangeObs,dfRangeProfile)
#Find the range from the values
dfRange <- dfRangeComb %>% aggregate(minTemp = min(minTemp), maxTemp = max(maxTemp))
return(dfRange)
}
dfTest <- FindTempRangeForElevation(dfPowellReleaseElev,dfPowellTempLevelsPlot, 6, 3625)
FindTempRangeForElevation <- function(dfObserved, dfProfile, Month, Elevation) {
#Find the range of release temperature for a specified Elevation using both observed and profile data sets
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, Month.x == Month) %>% aggregate(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, Month.x == Month) %>% aggregate(minTemp = min(T), maxTemp = max(T))
#Combine (bind) the datasets
dfRangeComb <- rbind(dfRangeObs,dfRangeProfile)
#Find the range from the values
dfRange <- dfRangeComb %>% aggregate(minTemp = min(minTemp), maxTemp = max(maxTemp))
return(dfRange)
}
dfTest <- FindTempRangeForElevation(dfPowellReleaseElev,dfPowellTempLevelsPlot, 6, 3625)
Month <- 6
Elevation <- 3625
dfObserved <- dfPowellReleaseElev
dfProfile <- dfPowellTempLevelsPlot
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, Month.x == Month) %>% aggregate(minTemp = min(minDay), maxTemp = max(maxDay))
View(dfPowellReleaseTempSum)
View(dfPowellReleaseElev)
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, Month.x == Month) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
View(dfRangeObs)
View(dfRangeObs)
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, Month.x == Month) %>% summarize(minTemp = min(T), maxTemp = max(T))
View(dfRangeProfile)
dfRangeComb <- rbind(dfRangeObs,dfRangeProfile)
dfRange <- dfRangeComb %>% aggregate(minTemp = min(minTemp), maxTemp = max(maxTemp))
dfRange <- dfRangeComb %>% summarize(minTemp = min(minTemp), maxTemp = max(maxTemp))
View(dfRange)
FindTempRangeForElevation <- function(dfObserved, dfProfile, Month, Elevation, ElevationTolerance) {
#Find the range of release temperature for a specified Elevation using both observed and profile data sets
#Searches the data in the Elevation range {Elevation, to Elevation+ElevationTolerance}
#Test values
#Month <- 6
#Elevation <- 3625
#dfObserved <- dfPowellReleaseElev
#dfProfile <- dfPowellTempLevelsPlot
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, ElevAvbPenstock <= Elevation + ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(T), maxTemp = max(T))
#Combine (bind) the datasets
dfRangeComb <- rbind(dfRangeObs,dfRangeProfile)
#Find the range from the values
dfRange <- dfRangeComb %>% summarize(minTemp = min(minTemp), maxTemp = max(maxTemp))
return(dfRange)
}
dfTest <- FindTempRangeForElevation(dfPowellReleaseElev,dfPowellTempLevelsPlot, 6, 3625, 10)
View(dfTest)
View(dfTest)
FindTempRangeForElevation <- function(dfObserved, dfProfile, Month, Elevation, ElevationTolerance) {
#Find the range of release temperature for a specified Elevation using both observed and profile data sets
#Searches the data in the Elevation range {Elevation, to Elevation+ElevationTolerance}
#Test values
#Month <- 6
#Elevation <- 3625
#dfObserved <- dfPowellReleaseElev
#dfProfile <- dfPowellTempLevelsPlot
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, ElevAvbPenstock <= Elevation + ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(T), maxTemp = max(T))
#Combine (bind) the datasets
dfRangeComb <- rbind(dfRangeObs,dfRangeProfile)
#Find the range from the values
dfRange <- dfRangeComb %>% summarize(minTemp = min(minTemp), maxTemp = max(maxTemp))
#Calculate the temperature range
dfRange$Range <- dfRange$maxTemp - dfRange$minTemp
return(dfRange)
}
dfTest <- FindTempRangeForElevation(dfPowellReleaseElev,dfPowellTempLevelsPlot, 6, 3625, 10)
View(dfTest)
dfTest <- FindTempRangeForElevation(dfPowellReleaseElev,dfPowellTempLevelsPlot, 6, 3550, 10)
View(dfTest)
Elevation <- 3550
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
ElevationTolerance <- 10
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
View(dfObserved)
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == Month)
View(dfRangeObs)
ElevationTolerance <- 20
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
ElevationTolerance <- 10
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, ElevAvbPenstock <= Elevation + ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(T), maxTemp = max(T))
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, ElevAvbPenstock <= Elevation + ElevationTolerance, Month.x == Month)
View(dfRangeProfile)
ElevationTolerance <- 20
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, ElevAvbPenstock <= Elevation + ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(T), maxTemp = max(T))
View(dfProfile)
View(dfProfile)
dfRangeProfile <- dfProfile %>%  filter(Month.x == Month)
View(dfRangeProfile)
dfRangeProfile <- dfProfile %>%  filter(MonthNum == Month)
dfRangeProfile <- dfProfile %>%  filter(MonNum == Month)
sapply(dfProfile,"class")
class(Month)
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, ElevAvbPenstock <= Elevation + ElevationTolerance, Month.x == 6) %>% summarize(minTemp = min(T), maxTemp = max(T))
ElevationTolerance <- 10
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, ElevAvbPenstock <= Elevation + ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(T), maxTemp = max(T))
Month <- 6
Elevation <- 3550
dfObserved <- dfPowellReleaseElev
dfProfile <- dfPowellTempLevelsPlot
ElevationTolerance <- 10
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, ElevAvbPenstock <= Elevation + ElevationTolerance, Month.x == Month) %>% summarize(minTemp = min(T), maxTemp = max(T))
MonthNum <- 6
Elevation <- 3550
dfObserved <- dfPowellReleaseElev
dfProfile <- dfPowellTempLevelsPlot
ElevationTolerance <- 10
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == MonthNum) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, ElevAvbPenstock <= Elevation + ElevationTolerance, Month.x == MonthNum) %>% summarize(minTemp = min(T), maxTemp = max(T))
dfRangeComb <- rbind(dfRangeObs,dfRangeProfile)
#Find the range from the values
dfRange <- dfRangeComb %>% summarize(minTemp = min(minTemp), maxTemp = max(maxTemp))
#Calculate the temperature range
dfRange$Range <- dfRange$maxTemp - dfRange$minTemp
FindTempRangeForElevation <- function(dfObserved, dfProfile, MonthNum, Elevation, ElevationTolerance) {
#Find the range of release temperature for a specified Elevation using both observed and profile data sets
#Searches the data in the Elevation range {Elevation, to Elevation+ElevationTolerance}
#Test values
#MonthNum <- 6
#Elevation <- 3550
#dfObserved <- dfPowellReleaseElev
#dfProfile <- dfPowellTempLevelsPlot
#ElevationTolerance <- 10
#Find temperature range for each data set
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance, Month.x == MonthNum) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeProfile <- dfProfile %>%  filter(ElevAvbPenstock >= Elevation, ElevAvbPenstock <= Elevation + ElevationTolerance, Month.x == MonthNum) %>% summarize(minTemp = min(T), maxTemp = max(T))
#Combine (bind) the datasets
dfRangeComb <- rbind(dfRangeObs,dfRangeProfile)
#Find the range from the values
dfRange <- dfRangeComb %>% summarize(minTemp = min(minTemp), maxTemp = max(maxTemp))
#Calculate the temperature range
dfRange$Range <- dfRange$maxTemp - dfRange$minTemp
return(dfRange)
}
dfTest <- FindTempRangeForElevation(dfPowellReleaseElev,dfPowellTempLevelsPlot, 6, 3550, 10)
dfTest <- FindTempRangeForElevation(dfPowellReleaseElev,dfPowellTempLevelsPlot, 6, 3550, 5)
dfTest <- FindTempRangeForElevation(dfPowellReleaseElev,dfPowellTempLevelsPlot, 6, 3525, 5)
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance) %>% group_by(Month.x) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance) %>% select(WaterSurface, Month.x, minDay, maxDay) %>% group_by(Month.x) %>% summarize(minTemp = min(minDay)) maxTemp = max(maxDay))
dfRangeObs <- dfObserved %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance) %>% select(WaterSurface, Month.x, minDay, maxDay) %>% group_by(Month.x) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeObs <- dfObserved %>% group_by(Month.x) %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance) %>% select(WaterSurface, Month.x, minDay, maxDay) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay))
dfRangeObs <- dfObserved %>% group_by(Month.x) %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance) %>% select(WaterSurface, Month.x, minDay, maxDay) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay), .group = "Keep")
dfRangeObs <- dfObserved %>% group_by(Month.x) %>% filter(WaterSurface >= Elevation, WaterSurface <= Elevation+ElevationTolerance) %>% select(WaterSurface, Month.x, minDay, maxDay) %>% summarize(minTemp = min(minDay), maxTemp = max(maxDay), .group = "keep")
